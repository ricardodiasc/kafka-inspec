/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kafka;

import java.time.Duration;
import java.util.Arrays;
import java.util.Properties;
import java.util.concurrent.ExecutionException;
import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.DescribeClusterResult;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.Node;

public class App {

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        System.out.println("Connecting to kafka....");

        Properties props = new Properties();
        props.put("bootstrap.servers", "localhost:9094");
        props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
        props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
        props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        props.put("group.id", "group1");
        props.put("enable.auto.commit", "false");
        try (KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props)) {
            consumer.subscribe(Arrays.asList("test-topic", "test-topic2"));


            // Use the consumer to create an AdminClient
            try (AdminClient adminClient = AdminClient.create(props)) {
                // Describe the Kafka cluster
                DescribeClusterResult clusterInfo = adminClient.describeCluster();

                // Get the controller node (the leader broker)
                Node controller = clusterInfo.controller().get();

                System.out.println("Controller Broker Host: " + controller.host());
                System.out.println("Controller Broker Port: " + controller.port());
            }
            while (true) {
                ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(300));

                for (ConsumerRecord<String, String> record : records) {
                    System.out.println("key=" + record.key() + ", value = " + record.value());
                }
                consumer.commitSync();
            }

        }
        // KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(props);

    }
}
